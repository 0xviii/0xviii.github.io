                          -- [ Intro ] --

Before we begin, I assume that you, the reader, already know what ptrace() is. In case you don’t:

ptrace is basically a system call for inspecting and manipulating processes (https://man7.org/linux/man-pages/man2/ptrace.2.html).


            I. aE_memory ─ Allocating Executable Memory

While creating this tool, I even thought about using something more sophisticated to inject the shellcode, such as code caves, shmget, or even manipulating the vDSO. However, I ended up feeling lazy and went down the easier path: simply allocating executable memory so that we can inject our shellcode.

--------------------------------------8<--------------------------------
void*
aE_memory (pid_t pid,
           size_t size)
{
  struct user_regs_struct regs;
  void *addr;

  if (ptrace(PTRACE_GETREGS, pid, NULL, &regs) == -1)
    {
      perror("PTRACE_GETREGS");
      return NULL;
    }

  regs.rax = 9;
  regs.rdi = 0;
  regs.rsi = size;
  regs.rdx = PROT_READ | PROT_WRITE | PROT_EXEC;
  regs.r10 = MAP_PRIVATE | MAP_ANONYMOUS;
  regs.r8 = -1;
  regs.r9 = 0;

  if (ptrace(PTRACE_SETREGS, pid, NULL, &regs) == -1)
    {
      perror("PTRACE_SETREGS");
      return NULL;
    }

  unsigned long syscall = 0x050f;
  unsigned long og = ptrace(PTRACE_PEEKTEXT, pid, regs.rip, NULL);
  if (ptrace(PTRACE_POKETEXT, pid, regs.rip, syscall) == -1)
    {
      perror("PTRACE_POKETEXT");
      return NULL;
    }

  if (ptrace(PTRACE_SINGLESTEP, pid, NULL, NULL) == -1)
    {
      perror("PTRACE_SINGLESTEP");
      return NULL;
    }

  waitpid(pid, NULL, 0);

  if (ptrace(PTRACE_GETREGS, pid, NULL, &regs) == -1)
    {
      perror("PTRACE_GETREGS");
      return NULL;
    }

  addr = (void *)regs.rax;

  if (ptrace(PTRACE_POKETEXT, pid, regs.rip, og) == -1)
    {
      perror("PTRACE_POKETEXT");
      return NULL;
    }

  return addr;
}
-------------------------->8--------------------------------------------

The idea is as follows:
